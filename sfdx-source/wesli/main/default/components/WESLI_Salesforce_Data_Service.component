<apex:component >
    <script>
    
    function DataService() {
        WESLI_OAuth_Service.getSettings(function (result, event) {
           jsforce.browser.init(result);
           
        });
    }
    
    DataService.prototype.arrayContains = function(arr, str){
       var c = false;
       for(var i=0; i<arr.length; i++){
         if(arr[i] == str){ c = true; }
       }
       return c;
    }
    DataService.prototype.globalDescribe = function(data){
      var conn = new jsforce.Connection(this.getconfig());
      return new Promise(function(resolve, reject){
      
      if(typeof data.resolve == 'undefined'){
        data.resolve = resolve;
      }
      
      var mydata = data;
      mydata.nextObjects = [];
       
       var promises = [];
 
       if(typeof mydata.desc == 'undefined'){
          mydata.desc = [];
       }
       
       if(typeof mydata.objects == 'undefined'){
          mydata.objects = [];
          mydata.objects.push(mydata.object);
         
       }
       
       if(typeof mydata.completedObjects == 'undefined'){
          mydata.completedObjects = [];
       }
       
       for(var i=0; i<mydata.objects.length; i++){
          if(dataService.arrayContains(mydata.completedObjects, mydata.objects[i]) == false){
             promises.push(conn.sobject(mydata.objects[i]).describe());
             mydata.completedObjects.push(mydata.objects[i]);
          }
       }
       
       
       
       if(promises.length > 0){
        Promise.all(promises).then(function(data){
           for(var i=0; i< data.length; i++){
               data[i].fmap = [];
               for(var j=0; j< data[i].fields.length; j++){
                  data[i].fmap[data[i].fields[j].name.toUpperCase()] = data[i].fields[j];
                  if(data[i].fields[j].type == 'reference'){
                     for(var k=0; k<data[i].fields[j].referenceTo.length; k++){
                        var f = data[i].fields[j].referenceTo[k].toUpperCase();
                        if(dataService.arrayContains(mydata.completedObjects, f) == false &&
                           dataService.arrayContains(mydata.nextObjects, f) == false){
                           mydata.nextObjects.push(f);
                        }
                     }
                  }
               }
               mydata.desc[data[i].name.toUpperCase()] = data[i];
           }
           return mydata;
       }).then(function(data){
           if(data.nextObjects.length > 0){
             data.objects = data.nextObjects;
                        
           }else{
             
           }
           dataService.globalDescribe(data);
       });
       
       }else{
          data.resolve(mydata);
       
       }
       
       
      });
    }
    
    DataService.prototype.getconfig = function(){
         var c = {};
         var conn = JSON.parse(officeDataService.getFromLocalStorage('oauthresult'));
         c.accessToken = conn.access_token;
         c.instanceUrl = conn.instance_url;      
         return c;
    }
    DataService.prototype.subscribe = function(event, callback) {
        var conn = new jsforce.Connection(this.getconfig());
        conn.streaming.topic('/event/' + event).subscribe(callback);
    }
    
    DataService.prototype.unsubscribe = function(event, callback) {
        var conn = new jsforce.Connection(this.getconfig());
        conn.streaming.topic('/event/' + event).unsubscribe(callback);
    }
    
    DataService.prototype.publish = function(event, data, callback) {
        var conn = new jsforce.Connection(this.getconfig());
        conn.sobject('/event/' + event).create(data, callback);
    }
    
    DataService.prototype.query = function(q) {
        
        var conn = new jsforce.Connection(this.getconfig());
        return conn.query(q).then(function(result, err){
            return {q: q, result: result};});     
    }
    
    DataService.prototype.describeObject = function(data) {
        var conn = new jsforce.Connection(this.getconfig());
        return conn.sobject(data.object).describe().then(function(meta, err){ 
            data.meta = meta;
            return data;
        });
    }
    </script>
</apex:component>